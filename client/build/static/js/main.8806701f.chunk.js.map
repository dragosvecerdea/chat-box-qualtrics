{"version":3,"sources":["logo.svg","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","_ref","reid","nickname","_ref$sex","sex","_useState","useState","_useState2","Object","slicedToArray","conversations","setConversations","_useState3","_useState4","_reid","setReid","_useState5","_useState6","ws","setWs","useEffect","axios","get","concat","process","REACT_APP_SERVER","then","res","data","_ws","WebSocket","REACT_APP_WS_SERVER","onopen","event","send","onmessage","_ref2","onclose","setTimeout","react_default","a","createElement","style","position","height","minHeight","es","map","conv","i","key","model","message","sender","direction","senderReid","Header","src","senderSex","size","autoFocus","attachButton","onSend","_ref3","post","headers","Content-Type","sendMessage","toConsumableArray","sentTime","Date","getTime","toString","catch","placeholder","dotenv","console","log","App","location","useLocation","setNickname","URLSearchParams","search","className","reportWebVitals","onPerfEntry","Function","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","react_router_dom_dist","src_App"],"mappings":"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","file":"static/js/main.8806701f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport {\n  Avatar,\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  ConversationHeader,\n} from \"@chatscope/chat-ui-kit-react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function Chat({ reid, nickname, sex = \"male\" }) {\n  const [conversations, setConversations] = useState([]);\n  const [_reid, setReid] = useState(reid);\n  const [ws, setWs] = useState(null);\n\n  useEffect(() => {\n    if (reid && !ws) {\n      setReid(reid);\n      axios\n        .get(`${process.env.REACT_APP_SERVER || \"\"}/api/chat/${reid}`)\n        .then((res) => setConversations(res.data));\n      let _ws = new WebSocket(\n        `${process.env.REACT_APP_WS_SERVER ||\n          \"wss://chat-box-qualtrics.herokuapp.com\"}`\n      );\n      _ws.onopen = (event) => {\n        _ws.send(reid);\n        axios.get(`${process.env.REACT_APP_SERVER || \"\"}/api/chat/${_reid}`);\n      };\n\n      _ws.onmessage = function({ data }) {\n        axios\n          .get(`${process.env.REACT_APP_SERVER || \"\"}/api/chat/${_reid}`)\n          .then((res) => setConversations(res.data));\n      };\n\n      _ws.onclose = function() {\n        setTimeout(() => setWs(null), 5000);\n      };\n      setWs(_ws);\n    }\n  }, [reid, ws]);\n\n  const sendMessage = ({ reid, message }) => {\n    return axios.post(\n      `${process.env.REACT_APP_SERVER || \"\"}/api/chat/${reid}`,\n      { message },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n  };\n  return (\n    <div style={{ position: \"relative\", height: \"100px\", minHeight: \"290px\" }}>\n      <MainContainer>\n        <ChatContainer>\n          <MessageList>\n            {conversations.map((conv, i) => (\n              <Message\n                key={i}\n                model={{\n                  message: conv.message,\n                  sender: conv.sender,\n                  direction: conv.senderReid == reid ? \"outgoing\" : null,\n                }}\n              >\n                <Message.Header sender={conv.sender}></Message.Header>\n                {conv.senderReid != reid ? (\n                  <Avatar\n                    src={process.env.PUBLIC_URL + `/${conv.senderSex}.png`}\n                    size=\"s\"\n                  />\n                ) : null}\n              </Message>\n            ))}\n          </MessageList>\n          <MessageInput\n            autoFocus\n            attachButton={false}\n            onSend={(message) =>\n              sendMessage({ message, reid })\n                .then(\n                  setConversations([\n                    ...conversations,\n                    {\n                      message,\n                      sentTime: new Date().getTime().toString(),\n                      sender: nickname,\n                      senderReid: reid,\n                      senderSex: sex,\n                    },\n                  ])\n                )\n                .catch()\n            }\n            placeholder=\"Type message here\"\n          />\n        </ChatContainer>\n      </MainContainer>\n    </div>\n  );\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport Chat from './Chat';\nimport React, { useEffect, useState } from 'react';\nimport * as dotenv from 'dotenv'\n\n\nimport {useLocation, BrowserRouter as Router, useParams} from 'react-router-dom';\nimport axios from 'axios';\ndotenv.config()\n\nconsole.log('HERE', process.env)\nfunction App() {\n  const location = useLocation();\n  const [reid, setReid] = useState(); \n  const [nickname, setNickname] = useState();\n  useEffect(() => {\n    setReid(new URLSearchParams(location.search.toString()).get('reid'))\n    reid && axios.get(`${process.env.REACT_APP_SERVER || ''}/api/nickname/${reid}`).then((res) => setNickname(res.data)).catch()\n  }, [])\n  return (\n    <div className=\"App\">\n      <Chat reid={reid} nickname={nickname}></Chat>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}