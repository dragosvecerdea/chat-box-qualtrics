{"version":3,"sources":["logo.svg","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","_ref","reid","_ref$nickname","nickname","_useState","useState","_useState2","Object","slicedToArray","conversations","setConversations","_useState3","_useState4","setWs","useEffect","axios","get","concat","process","then","res","data","_ws","WebSocket","onopen","event","send","onmessage","_ref2","react_default","a","createElement","style","position","height","minHeight","es","Content","userName","info","Actions","map","conv","i","key","model","message","sender","direction","senderReid","Header","attachButton","onSend","_ref3","post","headers","Content-Type","sendMessage","toConsumableArray","sentTime","Date","getTime","toString","catch","placeholder","dotenv","console","log","App","location","useLocation","setReid","setNickname","URLSearchParams","search","className","reportWebVitals","onPerfEntry","Function","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","react_router_dom_dist","src_App"],"mappings":"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","file":"static/js/main.2ff22234.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n  ConversationHeader,\n} from \"@chatscope/chat-ui-kit-react\";\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function Chat({ reid, nickname = \"Ioana\" }) {\n  const [conversations, setConversations] = useState([]);\n  const [ws, setWs] = useState({});\n\n  useEffect(() => {\n    if (reid) {\n      axios\n        .get(`${process.env.REACT_APP_SERVER || \"\"}/api/chat/${reid}`)\n        .then((res) => setConversations(res.data));\n      let _ws = new WebSocket(\n        `${process.env.REACT_APP_WS_SERVER ||\n          \"wss://chat-box-qualtrics.herokuapp.com\"}`\n      );\n      _ws.onopen = (event) => {\n        _ws.send(reid);\n      };\n\n      _ws.onmessage = function({ data }) {\n        axios\n          .get(`${process.env.REACT_APP_SERVER || \"\"}/api/chat/${reid}`)\n          .then((res) => setConversations(res.data));\n      };\n      setWs(_ws);\n    }\n  }, [reid]);\n\n  const sendMessage = ({ reid, message }) => {\n    return axios.post(\n      `${process.env.REACT_APP_SERVER || \"\"}/api/chat/${reid}`,\n      { message },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n  };\n  return (\n    <div style={{ position: \"relative\", height: \"100px\", minHeight: \"400px\" }}>\n      <MainContainer>\n        <ChatContainer>\n          <ConversationHeader>\n            <ConversationHeader.Content\n              userName=\"Experiment 1\"\n              info=\"Topic ...\"\n            />\n            <ConversationHeader.Actions></ConversationHeader.Actions>\n          </ConversationHeader>\n          <MessageList>\n            {conversations.map((conv, i) => (\n              <Message\n                key={i}\n                model={{\n                  message: conv.message,\n                  sender: conv.sender,\n                  direction: conv.senderReid == reid ? \"outgoing\" : null,\n                }}\n              >\n                <Message.Header sender={conv.sender}></Message.Header>\n                {conv.senderReid === reid ? (\n                  <Message.Header sender={conv.sender}></Message.Header>\n                ) : null}\n              </Message>\n            ))}\n          </MessageList>\n          <MessageInput\n            attachButton={false}\n            onSend={(message) =>\n              sendMessage({ message, reid })\n                .then(\n                  setConversations([\n                    ...conversations,\n                    {\n                      message,\n                      sentTime: new Date().getTime().toString(),\n                      sender: nickname,\n                      senderReid: reid,\n                    },\n                  ])\n                )\n                .catch()\n            }\n            placeholder=\"Type message here\"\n          />\n        </ChatContainer>\n      </MainContainer>\n    </div>\n  );\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport Chat from './Chat';\nimport React, { useEffect, useState } from 'react';\nimport * as dotenv from 'dotenv'\n\n\nimport {useLocation, BrowserRouter as Router, useParams} from 'react-router-dom';\nimport axios from 'axios';\ndotenv.config()\n\nconsole.log('HERE', process.env)\nfunction App() {\n  const location = useLocation();\n  const [reid, setReid] = useState(); \n  const [nickname, setNickname] = useState();\n  useEffect(() => {\n    setReid(new URLSearchParams(location.search.toString()).get('reid'))\n    reid && axios.get(`${process.env.REACT_APP_SERVER || ''}/api/nickname/${reid}`).then((res) => setNickname(res.data)).catch()\n  }, [])\n  return (\n    <div className=\"App\">\n      <Chat reid={reid} nickname={nickname}></Chat>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}